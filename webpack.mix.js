const mix = require('laravel-mix');
const tailwindcss = require('tailwindcss');
const del = require('del');

// --------------------------------------------

// set DEFAULT_SITE_URL to your local domain in your .env file...
let localDomain = process.env.DEFAULT_SITE_URL || 'example.test';
let srcPath = 'src';
let buildPath = mix.inProduction() ? 'public_html/assets' : 'public_html/_assets';

// This sets the location of the mix-manifest.json file.
// Putting in public_html/assets makes it more straight-forward to get read by the Craft Mix plugin
// when using "public_html" and "assets" respectively in the plugin's settings for publicPath + assetsPath.
mix.setPublicPath(buildPath);

// --------------------------------------------
// Options
// --------------------------------------------

mix.options({
	// don't be touchin' the urls in our CSS! Faster compile times,
	// ...and also might be required for using Tailwind with Sass anyway (see docs).
	// https://tailwindcss.com/docs/installation#build-tool-examples
	// (what kind of monster uses relative URLs in CSS anyway?!)
	processCssUrls: false,

	// specify which postcss plugins to use here...
	// PurgeCSS is now built-in to Tailwind, and can
	// be configured in the tailwind.config.js file.
	postCss: [ tailwindcss('tailwind.config.js') ],

	// when we're running `npm run all` we're running two things at once,
	// so don't clear the console or we'll lose the first one's output
	clearConsole: false,
});

// --------------------------------------------
// CSS
// --------------------------------------------

// process tailwind's main file with postCSS, as it's not Sass.
// This gives us massive time-savings on compile time.
mix.postCss(srcPath + '/css/tailwind-utilities.css',  buildPath + '/css/');

// process the rest with Sass
mix.sass(srcPath + '/css/_main.scss', buildPath + '/css/');

// now concatenate those two together. NB - combine() also minifies in prod env.
mix.combine([
	buildPath + '/css/_main.css',
	buildPath + '/css/tailwind-utilities.css'
], buildPath + '/css/main.css').then(function(){
	del(buildPath + '/css/_main.css');
	del(buildPath + '/css/tailwind-utilities.css');
});

// --------------------------------------------
// Very Magical JS Method. This does a *lot* without us even asking.
// See detail in the docs: https://laravel-mix.com/docs/5.0/mixjs
// --------------------------------------------

mix.js(srcPath + '/js/main.js', buildPath + '/js/');

// --------------------------------------------
// Ol faithful BrowserSync...
// --------------------------------------------

if (!mix.inProduction()) {
	require("dotenv").config();
	mix.browserSync({
		proxy: localDomain,
		injectChanges: true,
		open: false,
		files: [
			'templates/**/*.twig',
			buildPath + '/**/main.{css,js}',
		]
	});
}

// --------------------------------------------
// File revving
// --------------------------------------------

if (mix.inProduction()) {
	mix.version();
}

// --------------------------------------------
// Full API
// --------------------------------------------
//
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.when(condition, function (mix) {}) <-- Call function if condition is true.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
